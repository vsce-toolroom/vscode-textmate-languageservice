'use strict';

import * as vscode from 'vscode';

import { deepEqual } from './assert';
import { isWebRuntime } from './runtime';
import { loadJsonFile, writeJsonFile } from './common';
import { getComponentSampleDataUri } from './files';
import { jsonify } from './jsonify';

import { PartialDeep, JsonObject } from 'type-fest';

type Object = Record<number | string | symbol, any>;
type PartialJsonObject = PartialDeep<JsonObject>;

/**
 * Generate test pass for a VS Code language provider's output vs a sample MATLAB class.
 * @param {string} component Name of callee test object component - `src\*.js`.
 * @param {string} sample Basename of target sample file - `data\*\*\*.json`.
 * @param {object[]} output Result array generated by component test.
 */
export async function runSamplePass(component: string, basename: string, output: Object[]) {
	const data = getComponentSampleDataUri(component, basename);
	const filepath = `./test/data/${component}/${basename}.json`;
	let stat: vscode.FileStat | void = void 0;
	let expectedJson: PartialJsonObject | void = void 0;

	// Check if file exists.
	// eslint-disable-next-line no-empty
	try { stat = await vscode.workspace.fs.stat(data); } catch (_) {}
	// eslint-disable-next-line no-empty
	try { expectedJson = await loadJsonFile<PartialJsonObject>(data); } catch (_) {}

	const outputJson = jsonify(output);

	// Run JSON diff assert and record error.
	let error: TypeError | void = void 0;
	try {
		deepEqual(outputJson, expectedJson || [], filepath);
	} catch (e) {
		error = e as Error;
	}

	// In Node runtime, dump output to data component subdirectory.
	if (!isWebRuntime && error) {
		await writeJsonFile(data, outputJson);
	}

	// In web runtime, dump output to terminal console (web runtime).
	if (isWebRuntime && error) {
		console.log(`${filepath} expected contents:`);
		console.log('');
		// console.log(`    ${JSON.stringify(expectedJson)}`);
		// console.log('');
		console.log(`${filepath} actual contents:`)
		console.log('');
		// console.log(`    ${JSON.stringify(outputJson)}`);
		// console.log('');
	}

	// Throw an uncaught exception to exit Mocha test closure.
	if (error) {
		throw error;
	}
}
